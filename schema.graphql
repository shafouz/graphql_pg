"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `SequelizeMeta`."""
  allSequelizeMetas(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SequelizeMeta`."""
    orderBy: [SequelizeMetasOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SequelizeMetaCondition
  ): SequelizeMetasConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  sequelizeMetaByName(name: String!): SequelizeMeta
  userById(id: Int!): User
  userByName(name: String!): User
  userByEmail(email: String!): User

  """Reads and enables pagination through a set of `User`."""
  searchUser(
    search: String!

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): UsersConnection

  """Reads a single `SequelizeMeta` using its globally unique `ID`."""
  sequelizeMeta(
    """
    The globally unique `ID` to be used in selecting a single `SequelizeMeta`.
    """
    nodeId: ID!
  ): SequelizeMeta

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `SequelizeMeta` values."""
type SequelizeMetasConnection {
  """A list of `SequelizeMeta` objects."""
  nodes: [SequelizeMeta]!

  """
  A list of edges which contains the `SequelizeMeta` and cursor to aid in pagination.
  """
  edges: [SequelizeMetasEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SequelizeMeta` you could get from the connection."""
  totalCount: Int!
}

type SequelizeMeta implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  name: String!
}

"""A `SequelizeMeta` edge in the connection."""
type SequelizeMetasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SequelizeMeta` at the end of the edge."""
  node: SequelizeMeta
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `SequelizeMeta`."""
enum SequelizeMetasOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SequelizeMeta` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SequelizeMetaCondition {
  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  email: String!
  picture: String
  hash: String
  updatedAt: Time
  createdAt: Time
}

"""
The exact time of day, does not include the date. May or may not have a timezone offset.
"""
scalar Time

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PICTURE_ASC
  PICTURE_DESC
  HASH_ASC
  HASH_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `picture` field."""
  picture: String

  """Checks for equality with the object’s `hash` field."""
  hash: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Time

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Time
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `SequelizeMeta`."""
  createSequelizeMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSequelizeMetaInput!
  ): CreateSequelizeMetaPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `SequelizeMeta` using its globally unique id and a patch.
  """
  updateSequelizeMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSequelizeMetaInput!
  ): UpdateSequelizeMetaPayload

  """Updates a single `SequelizeMeta` using a unique key and a patch."""
  updateSequelizeMetaByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSequelizeMetaByNameInput!
  ): UpdateSequelizeMetaPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNameInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Deletes a single `SequelizeMeta` using its globally unique id."""
  deleteSequelizeMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSequelizeMetaInput!
  ): DeleteSequelizeMetaPayload

  """Deletes a single `SequelizeMeta` using a unique key."""
  deleteSequelizeMetaByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSequelizeMetaByNameInput!
  ): DeleteSequelizeMetaPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNameInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload
}

"""The output of our create `SequelizeMeta` mutation."""
type CreateSequelizeMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SequelizeMeta` that was created by this mutation."""
  sequelizeMeta: SequelizeMeta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SequelizeMeta`. May be used by Relay 1."""
  sequelizeMetaEdge(
    """The method to use when ordering `SequelizeMeta`."""
    orderBy: [SequelizeMetasOrderBy!] = [PRIMARY_KEY_ASC]
  ): SequelizeMetasEdge
}

"""All input for the create `SequelizeMeta` mutation."""
input CreateSequelizeMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SequelizeMeta` to be created by this mutation."""
  sequelizeMeta: SequelizeMetaInput!
}

"""An input for mutations affecting `SequelizeMeta`"""
input SequelizeMetaInput {
  name: String!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  name: String!
  email: String!
  picture: String
  hash: String
  updatedAt: Time
  createdAt: Time
}

"""The output of our update `SequelizeMeta` mutation."""
type UpdateSequelizeMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SequelizeMeta` that was updated by this mutation."""
  sequelizeMeta: SequelizeMeta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SequelizeMeta`. May be used by Relay 1."""
  sequelizeMetaEdge(
    """The method to use when ordering `SequelizeMeta`."""
    orderBy: [SequelizeMetasOrderBy!] = [PRIMARY_KEY_ASC]
  ): SequelizeMetasEdge
}

"""All input for the `updateSequelizeMeta` mutation."""
input UpdateSequelizeMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SequelizeMeta` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SequelizeMeta` being updated.
  """
  sequelizeMetaPatch: SequelizeMetaPatch!
}

"""
Represents an update to a `SequelizeMeta`. Fields that are set will be updated.
"""
input SequelizeMetaPatch {
  name: String
}

"""All input for the `updateSequelizeMetaByName` mutation."""
input UpdateSequelizeMetaByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SequelizeMeta` being updated.
  """
  sequelizeMetaPatch: SequelizeMetaPatch!
  name: String!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  name: String
  email: String
  picture: String
  hash: String
  updatedAt: Time
  createdAt: Time
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUserByName` mutation."""
input UpdateUserByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  name: String!
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  email: String!
}

"""The output of our delete `SequelizeMeta` mutation."""
type DeleteSequelizeMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SequelizeMeta` that was deleted by this mutation."""
  sequelizeMeta: SequelizeMeta
  deletedSequelizeMetaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `SequelizeMeta`. May be used by Relay 1."""
  sequelizeMetaEdge(
    """The method to use when ordering `SequelizeMeta`."""
    orderBy: [SequelizeMetasOrderBy!] = [PRIMARY_KEY_ASC]
  ): SequelizeMetasEdge
}

"""All input for the `deleteSequelizeMeta` mutation."""
input DeleteSequelizeMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SequelizeMeta` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSequelizeMetaByName` mutation."""
input DeleteSequelizeMetaByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserByName` mutation."""
input DeleteUserByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}
